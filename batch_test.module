<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_help().
 */
function batch_test_help($path, $arg) {

}

/**
 * Implements hook_permission().
 */
function batch_test_permission() {
  $perm_array = array();
  $perm_array['batch test'] = array(
    'title' => t('Access Batch Test Form'),
    'description' => t('Allow Access to the Batch Test submit form'),
  );
  $perm_array['administer batch test'] = array(
    'title' => t('Access Batch Test Administration'),
    'description' => t('Allow access to the batch test admin page'),
  );
  return $perm_array;
}

/**
 * Implements hook_menu().
 */
function batch_test_menu() {
  $items = array();
  $items['my_test/batch'] = array(
    'title' => 'Batch Test',
    'description' => 'My Custom Batch Test API.',
    'access arguments' => array('batch test'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_test_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function batch_test_form($form, &$form_state) {
  $form = array();
  $form['start_num'] = array(
    '#title' => t('Starting Number'),
    '#description' => t('Enter a number to start from of the Batch api.'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['end_num'] = array(
    '#title' => t('Ending Number'),
    '#description' => t('Enter a number to End the Batch api.'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function batch_test_form_submit($form, &$form_state) {
  $batch_options = array();
  $my_array = range($form_state['values']['start_num'], $form_state['values']['end_num'], 1);
  foreach($my_array as $index){
    $batch_options[] = array('my_batch_run_fun', array($index));
  }
  // Create the information to start a Batch Process.
  $batch = array(
    'title' => t('My Test Batch'),
    // The array of functions and items passed to that function.
    'operations' => $batch_options,
    // When all done go to finished function.
    'finished' => 'batch_test_finished',
    // Message to show in the bar when starting
    'init_message' => t('Example Batch is starting.'),
    // Message to show while running. Available placeholders are @current, @remaining, @total, @percentage, @estimate and @elapsed.
    'progress_message' => t('Processing @current out of @total.'),
  );

  batch_set($batch);
}

function my_batch_run_fun($number, &$context){
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
  }
  $context['sandbox']['progress']++;
  sleep(2);
}
function batch_test_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    //$message = t('@count items successfully processed:', array('@count' => count($results)));
    // $message .= theme('item_list', $results);  // D6 syntax
    //$message .= theme('item_list', array('items' => $results));
    // Display the message
    //drupal_set_message($message);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}
